name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - dev
        

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install UV
        run: pip install uv

      - name: Install project dependencies
        run: uv pip install --system .

      - name: Install Ruff
        run: uv pip install --system ruff

      - name: Lint with Ruff
        run: ruff check .

  test:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: test
    env:
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install UV
        run: pip install uv

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Start Docker Compose (DB)
        run: docker-compose up -d db

      - name: Wait for DB to be ready
        run: |
          for i in {1..30}; do
            docker-compose exec db pg_isready -U $POSTGRES_USER && break
            echo "Waiting for postgres db to be ready..."
            sleep 2
          done

      - name: Install project dependencies
        run: uv pip install --system .

      - name: Run Alembic migrations
        run: alembic upgrade head

      - name: Install Uvicorn
        run: uv pip install --system uvicorn

      - name: Start FastAPI (background) & health check
        run: |
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f http://127.0.0.1:8000/docs; then
              echo "FastAPI is healthy!"
              exit 0
            fi
            sleep 3
          done
          echo "FastAPI failed to start after 5 attempts"
          exit 1

  deploy:
    name: Deploy to ECR
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: dev
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: innomightlabs-api
      TF_VAR_postgres_user: ${{ vars.POSTGRES_USER }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_postgres_db: ${{ vars.POSTGRES_DB }}
      TF_VAR_google_api_key: ${{ secrets.GOOGLE_API_KEY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"

    - name: Deploy Infrastructure
      working-directory: infra
      run: |
        terraform init
        terraform refresh
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan

    - name: Get API Gateway URL
      id: get-api-url
      working-directory: infra
      run: |
        API_URL=$(terraform output -raw api_gateway_url)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Check Lambda Function Status
      run: |
        aws lambda get-function --function-name innomightlabs-api-lambda
        aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/innomightlabs-api-lambda"
        echo "Recent Lambda logs:"
        aws logs describe-log-streams --log-group-name "/aws/lambda/innomightlabs-api-lambda" --order-by LastEventTime --descending --max-items 1 | jq -r '.logStreams[0].logStreamName' | xargs -I {} aws logs get-log-events --log-group-name "/aws/lambda/innomightlabs-api-lambda" --log-stream-name {} --limit 10 || echo "No logs available yet"

    - name: Run Database Migrations
      run: |
        curl -X POST "${{ steps.get-api-url.outputs.api_url }}/migrate" \
          -H "Content-Type: application/json" \
          -d '{}' || echo "Migration endpoint not available, skipping..."
